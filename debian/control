Source: novaboot
Section: devel
Priority: optional
Maintainer: Michal Sojka <sojkam1@fel.cvut.cz>
Build-Depends: debhelper (>= 8.0.0), perl, libexpect-perl,
 python3-minimal, libpython3-stdlib, rsync, isolinux, syslinux-common,
 genisoimage, sudo
Standards-Version: 3.9.4
Homepage: https://github.com/wentasah/novaboot
Vcs-Git: https://github.com/wentasah/novaboot.git
Vcs-Browser: https://github.com/wentasah/novaboot

Package: novaboot
Architecture: all
Depends: perl, libexpect-perl, ${misc:Depends}
Recommends: perl-doc, rsync, qemu-system, openssh-client,
 syslinux, genisoimage, amtterm, libwww-perl, procps, sudo, file
Suggests: scons, make, isc-dhcp-server, tftpd-hpa, iproute | iproute2
Description: Tool for booting operating systems on remote hardware
 This program makes booting of an operating system (e.g. Linux or
 NOVA) as simple as running a local program. It facilitates booting on
 local or remote hosts or in emulators such as qemu. Novaboot
 operation is controlled by command line options and by a so called
 novaboot script, which can be thought as a generalization of
 bootloader configuration files. Based on this input, novaboot setups
 everything for the target host to boot the desired configuration,
 i.e. it generates the bootloader configuration file in the proper
 format, deploy the binaries and other needed files to required
 locations, perhaps on a remote TFTP server and reset the target host.
 Finally, target host's serial output is redirected to standard output
 if that is possible.

Package: novaboot-server
Architecture: all
Depends: dash | bash (>= 4.4), util-linux (>= 2.29), coreutils (>= 8.30), rsync, ${misc:Depends}
Description: Server-side scripts simplifying novaboot target configuration
 This package allows controlling novaboot target hardware via simple,
 unified, SSH-based interface. Most of the target configuration
 happens on the server, novaboot clients only need to specify '--ssh
 user@server' to use the target. The server is easily usable also
 without novaboot - e.g. resetting the target is as simple as running
 'ssh user@server reset'. The server contains logic that blocks other
 user's requests, while somebody else is connected to target's
 console. Blocked users see who is using the target and are
 automatically unblocked when the target becomes free.
